import Vue from 'vue'
import axios from 'axios'
import qs from 'qs'
import { getCookie, setCookie } from 'tool'
Vue.$axiosQueue = {}

export default function (options) {
	const _time = Date.now()
	const promiseKey = JSON.stringify(Object.assign({ _time }, options.data || {}))
	const CancelToken = axios.CancelToken
	const source = CancelToken.source()
	options.cancelToken = source.token
	const promise = new Promise(async (resolve, reject) => {
		// 默认配置
		const instance = axios.create()
		const token = getCookie('token')
		let useReportAPI = false,
			queue = []
		instance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'
		instance.defaults.headers.common['canary-by-header'] = true
		if (token) {
			instance.defaults.headers.common['authorization'] = token
		}
		if (this instanceof Vue) {
			useReportAPI = this.$root.useReportAPI
		}
		if (options.loading && this instanceof Vue) {
			if (options.noLimitTime) {
				this.$loader.show(null, true)
			} else {
				this.$loader.show()
			}
		}
		// 拦截器
		// 添加一个请求拦截器
		instance.interceptors.request.use(
			config => {
				const type = options.type
				const isFormData = Object.prototype.toString.call(config.data) === '[object FormData]'
				if (!config.node) {
					if (useReportAPI) {
						config.url = '/rep' + config.url
					} else if (!config.node) {
						// 判断是否是node的接口，默认为java接口
						config.url = '/jar' + config.url
					}
				}
				if (isFormData) {
					config.data.append('_time', _time)
				} else {
					config.data = Object.assign({}, { _time }, config.data)
				}
				if (type == 'post') {
					config.method = 'post'
					if (!isFormData) {
						config.data = qs.stringify(config.data, { arrayFormat: 'indices', allowDots: true })
					}
				} else {
					config.method = 'get'
					config.params = config.data
				}
				return config
			},
			err => {
				return Promise.reject(err)
			}
		)
		// 添加一个响应拦截器
		instance.interceptors.response.use(
			res => {
				if (options.loading && this instanceof Vue) {
					this.$loader.hide()
				}
				if (res.data.success || options.responseType === 'text') {
					return res.data
				} else {
					return Promise.reject(res.data)
				}
			},
			err => {
				return Promise.reject(err)
			}
		)
		// 需要等待的队列
		for (let request of Vue.$axiosQueue[options.url] || []) {
			if (options.cancelPending) {
				request.source.cancel('本次请求被取消')
			} else {
				queue.push(request.promise)
			}
		}
		if (queue.length > 0) await Promise.all(queue)
		instance(options)
			.then(res => {
				resolve(res)
			})
			.catch(err => {
				if (axios.isCancel(err)) {
					console.info(err.message)
				} else {
					const isLogin = location.href.indexOf('login') !== -1
					// 如果参数显示错误信息，则直接调用实例的catch
					if (options.error) {
						reject(err)
						return
					}
					// 如果是登录页面，则忽略报错
					if (isLogin) {
						return
					}
					if (err.code == 9001) {
						// 登录失效
						if (this instanceof Vue) {
							this.$message({
								type: 'error',
								message: '登录信息已过期，请重新登录',
								dangerouslyUseHTMLString: true
							})
							this.$router.push('/login')
						} else {
							location.href = '/login'
						}
						setCookie('token', '')
					} else if (err.code == 9004) {
						// 选择企业
						location.href = '/common/org/choose'
					} else {
						// 请求错误
						if (this instanceof Vue) {
							this.$message({
								type: 'error',
								message: err.msg,
								dangerouslyUseHTMLString: true
							})
						}
					}
				}
			})
			.finally(() => {
				let index = Vue.$axiosQueue[options.url].findIndex(el => el.promiseKey === promiseKey)
				index > -1 && Vue.$axiosQueue[options.url].splice(index, 1)
			})
	})
	if (!Vue.$axiosQueue[options.url]) Vue.$axiosQueue[options.url] = []
	Vue.$axiosQueue[options.url].push({
		promiseKey,
		promise,
		source
	})
	return promise
}
